BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

1.Implemented using env.config.<field> in every place that requires reference to a value defined by configuration.
2.Everywhere needed.
3.Running the game with different configuration by changing the configuration file.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

1. When creating the threads, one thread is started or closed at a time, by their order in a queue. Each thread waits for a notification to be able to close.
2. terminate() method of dealer.
3.Making each thread print it's initialization and termination, running the game many times with many threads to see the prints happen by order.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

1.Using synchronizations upon different locks and waiting on them. When there is stuff to do, the thread gets notified.
2.Almost all methods in dealer and player classes and mainly in "performAction","removeCardsFromTable", and thread loops.
3.Tested by trying removing notifications about pending tasks for threads from the code and observing threads getting stuck in deadlock.
